// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())

  email String @unique
  password String?

  name String @default("No name")
  avatarUrl String @map("avatar_url")

  address Address?

  role UserRole @default(USER)
  authByOAuth Boolean @default(false) @map("auth_by_oauth")

  favorites Product[]
  reviews Review[]
  orders Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user")
}

model Address{
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  address String
  city String
  state String
  zipCode String

  @@map("address")
}

model Category{
  id String @id @default(cuid())

  title String
  description String

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model Color {
  id String @id @default(cuid())
  
  name String
  value String

  products Product[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("color")
}

model Review {
  id String @id @default(cuid())

  text String
  rating Int

  user User? @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  product Product? @relation(fields: [productId], references: [id])
  productId String? @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("review")
}

model Order {
  id String @id @default(cuid())

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]
  total Int

  user User? @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order")
}

model OrderItem {
  id String @id @default(cuid())

  quantity Int
  price Int

  order Order? @relation(fields: [orderId], references: [id])
  orderId String? @map("order_id")

  product Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("order_item")
}

model ProductInfo{
  id String @id @default(cuid())

  title String
  value String

  product Product @relation(fields: [productId], references: [id])
  productId String @map("product_id")

  @@map("product_info")
}

model Product{
  id String @id @default(cuid())

  title String
  description String
  price Int
  images String[]

  attributes ProductInfo[]

  reviews Review[]
  orderItems OrderItem[]

  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String? @map("category_id")

  color Color? @relation(fields: [colorId], references: [id])
  colorId String? @map("color_id")

  user User? @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("product")
}

enum UserRole {
  USER
  ADMIN
}

enum EnumOrderStatus {
  PENDING
  PAYED
}
